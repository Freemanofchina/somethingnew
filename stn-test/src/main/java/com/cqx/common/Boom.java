package com.cqx.common;

import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;


/**
 * Java函数的参数是拷贝传递，只不过传递的是地址指针，按这个思路看看下面这个TEST
 * Created by Shan on 2017/2/10.
 */
public class Boom {

    class People {
        public String name;

        public People(String name) {
            this.name = name;
        }
    }

    @Test
    public void dateTest() {
        Date date = new Date();
        System.out.println(date.getTime());
        System.out.println(System.currentTimeMillis());
        Date date1 = new Date(date.getTime());
        System.out.println(date1.getYear());
        Date date2 = new Date(System.currentTimeMillis());
        System.out.println(date2.getYear());
    }

    @Test
    public void test() {
        int a = 10;
        method1(a);
        System.out.println(a);

        Integer b = 10;
        method2(b);
        System.out.println(b);

//        System.exit(0);       //退出

        String c = "c";
        method3(c);
        System.out.println(c);

        People people = new People("cqx");
        method4(people);
        System.out.println(people.name);


    }

    public void method1(int a) {
        a = 100;
    }

    public void method2(Integer b) {
        b = 100;
    }

    public void method3(String c) {
        c = "ccccc";
    }

    public void method4(People people) {
        people.name = "cqxnmb";
    }

    @Test
    public void kongge() {
        char var1 = '\u0000';   //0
        char var2 = '\u0020';   //空格
        String var3 = "01   ";
        StringBuilder sb = new StringBuilder(var1).append(var2);
        String var4 = String.valueOf(var1) + String.valueOf(var2);
        System.out.println("var1:" + var1);
        System.out.println("var2:" + var2);
        System.out.println("var3:" + var3);
        System.out.println("var4:" + var4);
        System.out.println(var1 == ' ');
        System.out.println(var2 == ' ');
        System.out.println(var1 == 0);
    }


    @Test(expected = NullPointerException.class)
    public void testFor() {
        List<String> strings = null;
        for (String s : strings) {
            System.out.println(s);
        }
    }

    @Test
    public void arrayCopy() {
        int[] a1 = {1, 2, 3, 4};
        int[] a2 = {5, 6, 7, 8};
        System.arraycopy(a1, 1, a2, 1, 2);
        System.out.println(1);
    }

    @Test
    public void calculate() {
        System.out.println(5/3);
        System.out.println(5%3);
    }

    @Test
    public void split() {
        String phoneStr = "13910394576\n" +
                "18635160668\n" +
                "18622196017\n" +
                "15163798001\n" +
                "18911521668\n" +
                "18017375333\n" +
                "15903667737\n" +
                "18910359672\n" +
                "15733469382\n" +
                "13621347871\n" +
                "18518703038\n" +
                "17310420064\n" +
                "13311518680\n" +
                "15131630907\n" +
                "15901328204\n" +
                "18068520338\n" +
                "18610016992\n" +
                "13718886010\n" +
                "18322239456\n" +
                "15522508188\n" +
                "13521375395\n" +
                "18001369182\n" +
                "18457904333\n" +
                "15515695859\n" +
                "18037791221\n" +
                "13603956820\n" +
                "13193935668\n" +
                "13838212995\n" +
                "18911265188\n" +
                "13955877021\n" +
                "18062050904\n" +
                "18017378456\n" +
                "13873678143\n" +
                "18711651028\n" +
                "13401780777\n" +
                "13046638999\n" +
                "13397172217\n" +
                "13871711018\n" +
                "13855187684\n" +
                "18979105977\n" +
                "18170094553\n" +
                "15751066333\n" +
                "18971275747\n" +
                "15153158035\n" +
                "17762549794\n" +
                "18974860276\n" +
                "13957600228\n" +
                "15388069825\n" +
                "13933801802\n" +
                "18055288518\n" +
                "18979190255\n" +
                "18162356903\n" +
                "18646318306\n" +
                "15698828655\n" +
                "13840441359\n" +
                "13478878777\n" +
                "13516000188\n" +
                "15840279051\n" +
                "13591438222\n" +
                "13504924952\n" +
                "13940194484\n" +
                "13478881889\n" +
                "18629837555\n" +
                "15898070807\n" +
                "15500044759\n" +
                "13840409249\n" +
                "15943099509\n" +
                "13822191361\n" +
                "18038811313\n" +
                "18076557088\n" +
                "13560313153\n" +
                "13826205571\n" +
                "18965282515\n" +
                "13879282292\n" +
                "15920325499\n" +
                "13870463883\n" +
                "15580583999\n" +
                "13637656168\n" +
                "18666271408\n" +
                "13826250535\n" +
                "13543827459\n" +
                "18620208807\n" +
                "18822906761\n" +
                "13316202966\n" +
                "13925188797\n" +
                "18457904333\n" +
                "15361258087\n" +
                "18922174776\n" +
                "13580408497\n" +
                "18602040030\n" +
                "17776136566\n" +
                "13397811207\n" +
                "13129343200\n" +
                "15605009765\n" +
                "18959817979\n" +
                "13714066208\n" +
                "13824620442\n" +
                "15315368672\n" +
                "13361551788\n" +
                "15726228797\n" +
                "13276315766\n" +
                "18396771888\n" +
                "18353960826\n" +
                "13608916444\n" +
                "18653728233\n" +
                "17686109132\n" +
                "15854518843\n" +
                "15553203888\n" +
                "15552238000\n" +
                "13581017999\n" +
                "18678233909\n" +
                "13589568117\n" +
                "13905371052\n" +
                "18653363422\n" +
                "17660401050\n" +
                "18017373222\n" +
                "13084029888\n" +
                "18017373166\n" +
                "15920336760\n" +
                "13285313262\n" +
                "18653665000\n" +
                "18217418983\n" +
                "13564022655\n" +
                "18602121891\n" +
                "13611870374\n" +
                "18680843689\n" +
                "15021297738\n" +
                "15000990476\n" +
                "13952081587\n" +
                "15901833769\n" +
                "17315285365\n" +
                "18851368488\n" +
                "15896081888\n" +
                "15705792200\n" +
                "18072829454\n" +
                "15949599415\n" +
                "18057201868\n" +
                "13906817254\n" +
                "18868678920\n" +
                "13867416888\n" +
                "15158000188\n" +
                "13396685766\n" +
                "15355027850\n" +
                "15381186663\n" +
                "15858143198\n" +
                "13989301548\n" +
                "18069202985\n" +
                "15158962518\n" +
                "18257950961\n" +
                "13606500815\n" +
                "13454697444\n" +
                "18989862999\n" +
                "15306558272\n" +
                "15251767970\n" +
                "15251766970\n" +
                "17706535333\n";
        String[] phones = phoneStr.split("\n");
        System.out.println(phones.length);
        List<String> badDatas = Arrays.stream(phones).filter(x -> x.length() != 11).map(String::trim).collect(Collectors.toList());
        List<String> goodDatas = Arrays.stream(phones).filter(x -> x.length() == 11).map(String::trim).collect(Collectors.toList());
        String result = goodDatas.stream().map(x -> "\"" + x + "\"").collect(Collectors.joining(","));
        System.out.println(result);

        //查找重复出现的
        List<String> aaa = goodDatas.stream().filter(x ->
            goodDatas.stream().filter(s -> s.equals(x)).count() > 1).collect(Collectors.toList());
        System.out.println(aaa);
    }


    @Test
    public void test111() {
        String a = "13084029888\n" +
                "13129343200\n" +
                "13193935668\n" +
                "13276315766\n" +
                "13285313262\n" +
                "13311518680\n" +
                "13316202966\n" +
                "13361551788\n" +
                "13396685766\n" +
                "13397172217\n" +
                "13397811207\n" +
                "13401780777\n" +
                "13454697444\n" +
                "13478878777\n" +
                "13478881889\n" +
                "13504924952\n" +
                "13516000188\n" +
                "13521375395\n" +
                "13543827459\n" +
                "13560313153\n" +
                "13580408497\n" +
                "13581017999\n" +
                "13589568117\n" +
                "13591438222\n" +
                "13603956820\n" +
                "13606500815\n" +
                "13608916444\n" +
                "13611870374\n" +
                "13621347871\n" +
                "13637656168\n" +
                "13714066208\n" +
                "13718886010\n" +
                "13822191361\n" +
                "13826205571\n" +
                "13826250535\n" +
                "13838212995\n" +
                "13840409249\n" +
                "13840441359\n" +
                "13855187684\n" +
                "13867416888\n" +
                "13870463883\n" +
                "13871711018\n" +
                "13873678143\n" +
                "13879282292\n" +
                "13905371052\n" +
                "13906817254\n" +
                "13910394576\n" +
                "13925188797\n" +
                "13933801802\n" +
                "13940194484\n" +
                "13952081587\n" +
                "13955877021\n" +
                "13957600228\n" +
                "13989301548\n" +
                "15000990476\n" +
                "15021297738\n" +
                "15131630907\n" +
                "15153158035\n" +
                "15158000188\n" +
                "15158962518\n" +
                "15163798001\n" +
                "15251766970\n" +
                "15315368672\n" +
                "15355027850\n" +
                "15361258087\n" +
                "15381186663\n" +
                "15388069825\n" +
                "15500044759\n" +
                "15515695859\n" +
                "15522508188\n" +
                "15552238000\n" +
                "15553203888\n" +
                "15580583999\n" +
                "15605009765\n" +
                "15698828655\n" +
                "15705792200\n" +
                "15726228797\n" +
                "15733469382\n" +
                "15751066333\n" +
                "15840279051\n" +
                "15854518843\n" +
                "15858143198\n" +
                "15896081888\n" +
                "15898070807\n" +
                "15901328204\n" +
                "15901833769\n" +
                "15920325499\n" +
                "15920336760\n" +
                "15943099509\n" +
                "15949599415\n" +
                "17310420064\n" +
                "17315285365\n" +
                "17660401050\n" +
                "17686109132\n" +
                "17762549794\n" +
                "17776136566\n" +
                "18001369182\n" +
                "18017373166\n" +
                "18017373222\n" +
                "18017375333\n" +
                "18017378456\n" +
                "18037791221\n" +
                "18038811313\n" +
                "18055288518\n" +
                "18057201868\n" +
                "18062050904\n" +
                "18068520338\n" +
                "18072829454\n" +
                "18076557088\n" +
                "18162356903\n" +
                "18170094553\n" +
                "18217418983\n" +
                "18257950961\n" +
                "18322239456\n" +
                "18353960826\n" +
                "18396771888\n" +
                "18457904333\n" +
                "18518703038\n" +
                "18602040030\n" +
                "18602121891\n" +
                "18610016992\n" +
                "18620208807\n" +
                "18622196017\n" +
                "18635160668\n" +
                "18646318306\n" +
                "18653363422\n" +
                "18653665000\n" +
                "18653728233\n" +
                "18666271408\n" +
                "18678233909\n" +
                "18680843689\n" +
                "18711651028\n" +
                "18822906761\n" +
                "18851368488\n" +
                "18868678920\n" +
                "18910359672\n" +
                "18911265188\n" +
                "18922174776\n" +
                "18959817979\n" +
                "18965282515\n" +
                "18971275747\n" +
                "18974860276\n" +
                "18979105977\n" +
                "18979190255\n" +
                "18989862999\n";
        String b = "13910394576\n" +
                "18635160668\n" +
                "18622196017\n" +
                "15163798001\n" +
                "18911521668\n" +
                "18017375333\n" +
                "15903667737\n" +
                "18910359672\n" +
                "15733469382\n" +
                "13621347871\n" +
                "18518703038\n" +
                "17310420064\n" +
                "13311518680\n" +
                "15131630907\n" +
                "15901328204\n" +
                "18068520338\n" +
                "18610016992\n" +
                "13718886010\n" +
                "18322239456\n" +
                "15522508188\n" +
                "13521375395\n" +
                "18001369182\n" +
                "18457904333\n" +
                "15515695859\n" +
                "18037791221\n" +
                "13603956820\n" +
                "13193935668\n" +
                "13838212995\n" +
                "18911265188\n" +
                "13955877021\n" +
                "18062050904\n" +
                "18017378456\n" +
                "13873678143\n" +
                "18711651028\n" +
                "13401780777\n" +
                "13046638999\n" +
                "13397172217\n" +
                "13871711018\n" +
                "13855187684\n" +
                "18979105977\n" +
                "18170094553\n" +
                "15751066333\n" +
                "18971275747\n" +
                "15153158035\n" +
                "17762549794\n" +
                "18974860276\n" +
                "13957600228\n" +
                "15388069825\n" +
                "13933801802\n" +
                "18055288518\n" +
                "18979190255\n" +
                "18162356903\n" +
                "18646318306\n" +
                "15698828655\n" +
                "13840441359\n" +
                "13478878777\n" +
                "13516000188\n" +
                "15840279051\n" +
                "13591438222\n" +
                "13504924952\n" +
                "13940194484\n" +
                "13478881889\n" +
                "18629837555\n" +
                "15898070807\n" +
                "15500044759\n" +
                "13840409249\n" +
                "15943099509\n" +
                "13822191361\n" +
                "18038811313\n" +
                "18076557088\n" +
                "13560313153\n" +
                "13826205571\n" +
                "18965282515\n" +
                "13879282292\n" +
                "15920325499\n" +
                "13870463883\n" +
                "15580583999\n" +
                "13637656168\n" +
                "18666271408\n" +
                "13826250535\n" +
                "13543827459\n" +
                "18620208807\n" +
                "18822906761\n" +
                "13316202966\n" +
                "13925188797\n" +
                "18457904333\n" +
                "15361258087\n" +
                "18922174776\n" +
                "13580408497\n" +
                "18602040030\n" +
                "17776136566\n" +
                "13397811207\n" +
                "13129343200\n" +
                "15605009765\n" +
                "18959817979\n" +
                "13714066208\n" +
                "13824620442\n" +
                "15315368672\n" +
                "13361551788\n" +
                "15726228797\n" +
                "13276315766\n" +
                "18396771888\n" +
                "18353960826\n" +
                "13608916444\n" +
                "18653728233\n" +
                "17686109132\n" +
                "15854518843\n" +
                "15553203888\n" +
                "15552238000\n" +
                "13581017999\n" +
                "18678233909\n" +
                "13589568117\n" +
                "13905371052\n" +
                "18653363422\n" +
                "17660401050\n" +
                "18017373222\n" +
                "13084029888\n" +
                "18017373166\n" +
                "15920336760\n" +
                "13285313262\n" +
                "18653665000\n" +
                "18217418983\n" +
                "13564022655\n" +
                "18602121891\n" +
                "13611870374\n" +
                "18680843689\n" +
                "15021297738\n" +
                "15000990476\n" +
                "13952081587\n" +
                "15901833769\n" +
                "17315285365\n" +
                "18851368488\n" +
                "15896081888\n" +
                "15705792200\n" +
                "18072829454\n" +
                "15949599415\n" +
                "18057201868\n" +
                "13906817254\n" +
                "18868678920\n" +
                "13867416888\n" +
                "15158000188\n" +
                "13396685766\n" +
                "15355027850\n" +
                "15381186663\n" +
                "15858143198\n" +
                "13989301548\n" +
                "18069202985\n" +
                "15158962518\n" +
                "18257950961\n" +
                "13606500815\n" +
                "13454697444\n" +
                "18989862999\n" +
                "15306558272\n" +
                "15251767970\n" +
                "15251766970\n" +
                "17706535333\n";

        String[] aa = a.split("\n");
        String[] bb = b.split("\n");
        List<String> cc = new ArrayList<>();
        for (int i = 0; i < bb.length; i ++) {
            boolean in = false;
            for (int j = 0; j < aa.length; j ++) {
                if (aa[j].equals(bb[i])) {
                    in = true;
                }
            }
            if (!in) {
                cc.add(bb[i]);
            }
        }
        System.out.println(cc.size());
        cc.stream().forEach(s -> System.out.println(s));
    }
}
